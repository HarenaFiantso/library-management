openapi: 3.0.3
info:
  title: Library API
  version: "1.2.0"
  description: STD22086
servers:
  - url: https://library.com
tags:
  - name: Books
    description: Operations related to books
  - name: Authors
    description: Operations related to authors
paths:
  "/books":
    get:
      tags: [Books]
      summary: Get books
      description: Retrieve a list of books, with optional filters and pagination.
      operationId: getBooks
      parameters:
        - $ref: "#/components/parameters/queryPagination"
        - $ref: "#/components/parameters/queryPageSize"
      responses:
        200:
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    put:
      summary: Create/Update books
      operationId: crupdateBooks
      tags: [Books]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBook"
      responses:
        200:
          description: List of created/updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  "/books/{bookId}/authors/{authorId}":
    put:
      tags: [Books]
      summary: Update author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: Book ID
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: Author ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author updated successfully
  "/books/authors":
    put:
      tags: [Books]
      summary: Associate authors with books
      operationId: associateAuthorsWithBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: Authors associated with books successfully
  "/authors":
    get:
      summary: Get authors
      description: Retrieve a list of authors with optional pagination.
      operationId: getAuthors
      tags: [Authors]
      parameters:
        - $ref: "#/components/parameters/queryPagination"
        - $ref: "#/components/parameters/queryPageSize"
      responses:
        200:
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    put:
      summary: Create/Update authors
      operationId: createOrUpdateAuthors
      tags: [Authors]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: List of created/updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    delete:
      summary: Delete authors
      description: Delete all authors in the system.
      operationId: deleteAuthors
      tags: [Authors]
      responses:
        204:
          description: Authors successfully deleted
  "/authors/{aId}":
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags: [Authors]
      parameters:
        - name: aId
          in: path
          description: Author ID to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
components:
  responses:
    Response200:
      description: Response 200 (Success)
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/responses/DefaultResponse"
              - type: object
                properties:
                  status:
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: "Success"
                  body:
                    type: object
                    properties:
                      data:
                        type: object
    Response400:
      description: Response 400 (Bad Request)
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/responses/DefaultResponse"
              - type: object
                properties:
                  status:
                    properties:
                      code:
                        type: integer
                        example: 400
                      message:
                        type: string
                        example: "Bad Request"
                  body:
                    type: object
                    properties:
                      error:
                        type: string
    Response403:
      description: Response 403 (Forbidden)
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/responses/DefaultResponse"
              - type: object
                properties:
                  status:
                    properties:
                      code:
                        type: integer
                        example: 403
                      message:
                        type: string
                        example: "Forbidden"
                  body:
                    type: object
                    properties:
                      error:
                        type: string
    Response500:
      description: RÃ©ponse 500 (Internal Server Error)
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/responses/DefaultResponse"
              - type: object
                properties:
                  status:
                    properties:
                      code:
                        type: integer
                        example: 500
                      message:
                        type: string
                        example: "Internal Server Error"
                  body:
                    type: object
                    properties:
                      error:
                        type: string
    DefaultResponse:
      description: Default response for all reponses
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Success"
              body:
                type: object
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for paginated results (defaults to 1)
      required: false
      schema:
        type: integer
        default: 1
    queryPageSize:
      name: pageSize
      in: query
      description: Number of records per page (defaults to 50, max is 100)
      required: false
      schema:
        type: integer
        default: 50
    pathPagination:
      name: page
      in: path
      description: Page number for paginated results (defaults to 1)
      required: true
      schema:
        type: integer
    pathPageSize:
      name: pageSize
      in: path
      description: Number of records per page (defaults to 50, max is 100)
      required: true
      schema:
        type: integer
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        pageNumbers:
          type: integer
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"
    CrupdateBook:
      allOf:
        - $ref: "#/components/schemas/Book"
        - type: object
          properties:
            author:
              type: string
    Sex:
      type: string
      enum: [M, F]
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          description: Book ID to associate with the author
        authorId:
          type: string
          description: Author ID to associate with the book
