openapi: 3.0.3
info:
  title: Library API
  version: '1.3.0'
  description: STD22086 - STD22089
servers:
  - url: https://library.com
    description: Main server
tags:
  - name: Books
    description: Operations related to books
  - name: Authors
    description: Operations related to authors
  - name: Visitors
    description: Operations related to visitors
paths:
  '/books':
    get:
      tags: [Books]
      summary: Retrieve a list of books
      description: Retrieve a list of books from the library. You can apply filters and pagination
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/books/export':
    get:
      tags: [Books]
      summary: Export books to Excel or JSON
      operationId: exportBooks
      parameters:
        - name: format
          in: query
          description: Format of the exported data (json or excel)
          schema:
            type: string
            enum: [json, excel]
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/books/borrowed':
    get:
      tags: [Books]
      summary: Get borrowed books
      description: Retrieve a list of books that are currently borrowed.
      operationId: getBorrowedBooks
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/books/available':
    get:
      tags: [Books]
      summary: Get available books
      description: Retrieve a list of books that are currently available for borrowing.
      operationId: getAvailableBooks
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/books/import':
    post:
      tags: [Books]
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                books:
                  type: array
                  items:
                    $ref: '#/components/schemas/BookImport'
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBook'
                - $ref: '#/components/schemas/ImportAuthor'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
    put:
      summary: Create/Update books
      operationId: crupdateBooks
      tags: [Books]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/books/{bookId}/authors/{authorId}':
    put:
      tags: [Books]
      summary: Update author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: Book ID
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: Author ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/books/authors':
    put:
      tags: [Books]
      summary: Associate authors with books
      operationId: associateAuthorsWithBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/authors':
    get:
      summary: Get authors
      description: Retrieve a list of authors with optional pagination.
      operationId: getAuthors
      tags: [Authors]
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/authors/export':
    get:
      tags: [Authors]
      summary: Export Authors to Excel or JSON
      operationId: exportAuhors
      parameters:
        - name: format
          in: query
          description: Format of the exported data (json or excel)
          schema:
            type: string
            enum: [json, excel]
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/authors/import':
    post:
      tags: [Authors]
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authors:
                  type: array
                  items:
                    $ref: '#/components/schemas/AuthorImport'
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBook'
                - $ref: '#/components/schemas/ImportAuthor'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
    put:
      summary: Create/Update authors
      operationId: createOrUpdateAuthors
      tags: [Authors]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
    delete:
      summary: Delete authors
      description: Delete all authors in the system.
      operationId: deleteAuthors
      tags: [Authors]
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/authors/{aId}':
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags: [Authors]
      parameters:
        - name: aId
          in: path
          description: Author ID to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/visitors':
    get:
      summary: Get visitors
      description: Retrieve a list of visitors with optional pagination.
      operationId: getVisitors
      tags: [Visitors]
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
  '/visitors/{visitorId}/activities':
    get:
      tags: [Visitors]
      summary: Get visitor activities
      description: Retrieve a list of activities (borrowing and returning books) performed by a visitor.
      operationId: getVisitorActivities
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: string
        - in: query
          name: startDate
          description: Start date for filtering activities
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: End date for filtering activities
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'

  '/visitors/{visitorId}/borrow':
    post:
      tags: [Visitors]
      summary: Visitor borrows a book
      operationId: visitorBorrowBook
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor borrowing the book
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                  description: ID of the book to borrow
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
        x-codegen-request-body-name: borrowInfo
        x-codegen-request-body-description: Information for book borrowing
        x-codegen-request-body-example:
          bookId: '1'
        x-codegen-response-body-name: borrowResponse
        x-codegen-response-body-description: Response after book borrowing
        x-codegen-response-body-example:
          status:
            code: 200
            message: 'Success'
          body:
            result: 'success'
            data:
              borrowedBook:
                id: '1'
                bookName: 'The Great Gatsby'
                author:
                  id: '1'
                  authorName: 'F. Scott Fitzgerald'
                  sex: 'M'
                pageNumbers: 180
                topic: 'ROMANCE'
                releaseDate: '2022-01-01'
                disponible: false
  '/visitors/{visitorId}/return':
    post:
      tags: [Visitors]
      summary: Visitor returns a borrowed book
      operationId: visitorReturnBook
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor returning the book
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                  description: ID of the book to return
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        404:
          $ref: '#/components/responses/Response404'
        500:
          $ref: '#/components/responses/Response500'
components:
  securitySchemes:
    allUser_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://h2.com/oauth/authorize
          scopes:
            read:books: read list of books
            read:authors: read list of authors
    admin_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://h2.com/oauth/authorize
          scopes:
            write:books: add/update books
            write:authors: add/update authors
            read:books: read list of books
            read:authors: read list of authors
            borrow:books: borrow books
            return:books: return books
            import:books: import books
            import:authors: import authors

  responses:
    Response200:
      description: Response 200 (Success)
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/DefaultResponse'
              - type: object
                properties:
                  status:
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: 'Success'
                  body:
                    type: object
                    properties:
                      data:
                        type: object
    Response400:
      description: Response 400 (Bad Request)
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/DefaultResponse'
              - type: object
                properties:
                  status:
                    properties:
                      code:
                        type: integer
                        example: 400
                      message:
                        type: string
                        example: 'Bad Request'
                  body:
                    type: object
                    properties:
                      error:
                        type: string
    Response403:
      description: Response 403 (Forbidden)
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/DefaultResponse'
              - type: object
                properties:
                  status:
                    properties:
                      code:
                        type: integer
                        example: 403
                      message:
                        type: string
                        example: 'Forbidden'
                  body:
                    type: object
                    properties:
                      error:
                        type: string
    Response404:
      description: Response 404 (Not Found)
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/DefaultResponse'
              - type: object
                properties:
                  status:
                    properties:
                      code:
                        type: integer
                        example: 404
                      message:
                        type: string
                        example: 'Not Found'
                  body:
                    type: object
                    properties:
                      error:
                        type: string
    Response500:
      description: Response 500 (Internal Server Error)
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/DefaultResponse'
              - type: object
                properties:
                  status:
                    properties:
                      code:
                        type: integer
                        example: 500
                      message:
                        type: string
                        example: 'Internal Server Error'
                  body:
                    type: object
                    properties:
                      error:
                        type: string
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for paginated results (defaults to 1)
      required: false
      schema:
        type: integer
        default: 1
    queryPageSize:
      name: pageSize
      in: query
      description: Number of records per page (defaults to 50, max is 100)
      required: false
      schema:
        type: integer
        default: 50
    pathPagination:
      name: page
      in: path
      description: Page number for paginated results (defaults to 1)
      required: true
      schema:
        type: integer
    pathPageSize:
      name: pageSize
      in: path
      description: Number of records per page (defaults to 50, max is 100)
      required: true
      schema:
        type: integer
  schemas:
    BorrowInfoVisitor:
      type: object
      properties:
        visitorId:
          type: string
          description: ID of the visitor borrowing the book
        bookId:
          type: string
          description: ID of the borrowed book
        borrowDate:
          type: string
          format: date-time
          description: Date and time of borrowing
    ReturnInfoVisitor:
      type: object
      properties:
        visitorId:
          type: string
          description: ID of the visitor returning the book
        bookId:
          type: string
          description: ID of the returned book
        returnDate:
          type: string
          format: date-time
          description: Date and time of return
    DefaultResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
              example: 200
            message:
              type: string
              example: 'Success'
        body:
          type: object
          additionalProperties: false
          properties:
            result:
              type: string
              example: 'success'
            data:
              type: object
              properties:
                books:
                  type: array
                  items:
                    $ref: '#/components/schemas/Book'
                authors:
                  type: array
                  items:
                    $ref: '#/components/schemas/Author'
          required:
            - result
            - data
    BookImport:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookWithoutID'
    BookWithoutID:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
          minimum: 1
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date
      required:
        - bookName
        - author
        - pageNumbers
        - topic
        - releaseDate
    AuthorImport:
      type: object
      properties:
        authors:
          type: array
          items:
            $ref: '#/components/schemas/AuthorWithoutID'
    AuthorWithoutID:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
          enum: [M, F]
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
          enum: [M, F]
    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: integer
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - available
            - borrowed
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    CrupdateBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            author:
              type: string
    Sex:
      type: string
      enum: [M, F]
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          description: Book ID to associate with the author
        authorId:
          type: string
          description: Author ID to associate with the book

    Visitor:
      type: object
      properties:
        id:
          type: string
        visitorName:
          type: string
        reference:
          type: string
